<?php

module_load_include('inc', 'bookbox', 'bookbox.functions');

function bookbox_block_info() {
  $blocks = array();

  $blocks['MiniCart'] = array(
    'info' => t('Mini cart'),
  );

  $blocks['ReadingNow'] = array(
      'info' => t('Reading now'),
  );

  return $blocks;
}

function bookbox_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'MiniCart':
      $block['subject'] = '';
      $form = drupal_get_form('bookbox_mini_cart_block');
      $block['content'] = drupal_render($form);
      break;

    case 'ReadingNow':
      $block['subject'] = '';
      $form = drupal_get_form('bookbox_reading_now_block');
      $block['content'] = drupal_render($form);
      break;
  }

  return $block;
}

function bookbox_form_commerce_cart_add_to_cart_form_alter(&$form, &$form_state) {
  //todo
  // можно добавить максимум 2
  // а если есть книжка из заказа прошлого месяца то 1
  // а если 2 то 0
  // если эта книга уже в заказе на продление то тоже не добавлять

  //todo
  //может быть 0 книг в корзине но 1 или 2 в продленке
  $form_product = $form['product_id']['#value'];
  $wrapper = _bookbox_get_cart_items();
  $can_add2cart = true;

  if ($wrapper) {
    foreach ($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      $cart_product = $line_item_wrapper->commerce_product->value()->product_id;

      if($form_product == $cart_product) {
        $can_add2cart = false;
        break;
      }
    }
  }

  if (!$can_add2cart) {
    $form['submit']['#attributes']['disabled'] = TRUE;
  }
}

function bookbox_mini_cart_block($form, &$form_state) {
  $form['title'] = array(
    '#type' => 'markup',
    '#markup' => '<h3>Замовлення лютого</h3>', //todo
  );

  //todo
  // если у нас есть книжки их прошлого месяца то тогда что?
  // если 1 из прошлого то показывать 1 свободное место
  $wrapper = _bookbox_get_cart_items();
  $cart_count = 0;

  if ($wrapper) {
    foreach ($wrapper->commerce_line_items as $delta => $line_item_wrapper) {
      $cart_product = $line_item_wrapper->commerce_product->value()->product_id;

      $product_display = _bookbox_get_product_display_by_product_id($cart_product);

      if ($product_display->nid) {
        $cart_count = $cart_count + 1;

        if ($product_display->field_nni) {
          $fid = $product_display->field_nni['und']['0']['fid'];
          $file = file_load($fid);

          if ($file) {
            $uri = $file->uri;
            $img = '<img src=\'' . image_style_url("bookcover", $uri) . '\' />';

            $form['book_cover' . $cart_count] = array(
                '#type' => 'markup',
                '#markup' => $img,
            );
          }
        }

        $form['book_' . $cart_count] = array(
            '#type' => 'markup',
            '#markup' => $product_display->title,
        );

        $form['del_from_cart_submit' . $cart_count] = array(
            '#type' => 'submit',
            '#submit' => array('bookbox_delete_bookfromcart' . $cart_count),
            '#value' => t('delete from box'),
        );
      }
    }
  }
  
  if ($cart_count > 0) {
    $form['submit_box'] = array(
        '#type' => 'submit',
      //'#validate' => array('statistiques_form_validate'),
        '#submit' => array('bookbox_confirm_box'),
        '#weight' => 10,
        '#value' => t('Підтвердити замовлення'), //todo
    );
  }

  if ($cart_count < 2) {
    $in_prolong = bookbox_count_in_prolong();
    $empty_cells = 2 - $cart_count - $in_prolong;


    for($i=0; $i <$empty_cells;$i++) {
      dsm($empty_cells);

      $form['add_book_link_'.$i] = array(
          '#type' => 'markup',
          '#markup' => '<a class="add_some_book" href="/books">Оберіть книгу</a>',
      );

    }

    //todo можно один сабмитить если 1 книга в продлении :TRUE
    $form['submit_box']['#attributes']['disabled'] = FALSE;
    //dsm($form, 'form');
  }

  return $form;
}


// Блок ЧИТАЮ СЕЙЧАС
//
function bookbox_reading_now_block ($form, &$form_state) {

  $form['title'] = array(
      '#type' => 'markup',
      '#markup' => '<h3>Зараз читаю</h3>', //todo
  );

  $result = bookbox_get_in_prolong();
  //dsm($result);

  if ($result) {
    $box_count = 0;

    foreach ($result as $res) {
      //
      $order = commerce_order_load($res->order_id);

      dsm($order);

      $line_item_id = $order->commerce_line_items['und'][0]['line_item_id'];
      $line_item = commerce_line_item_load($line_item_id);
      $product_id =  $line_item->commerce_product['und'][0]['product_id'];
      $product_display = _bookbox_get_product_display_by_product_id($product_id);

      if ($product_display->nid) {
        $box_count = $box_count + 1;

        if ($product_display->field_nni) {
          $fid = $product_display->field_nni['und']['0']['fid'];
          $file = file_load($fid);

          if ($file) {
            $uri = $file->uri;
            $img = '<img src=\'' . image_style_url("bookcover", $uri) . '\' />';

            $form['book_cover' . $box_count] = array(
                '#type' => 'markup',
                '#markup' => $img,
            );
          }
        }

        $form['book_' . $box_count] = array(
            '#type' => 'markup',
            '#markup' => $product_display->title,
        );

        //todo
        $form['prolong_book' . $box_count] = array(
            '#type' => 'submit',
            '#submit' => array('bookbox_prolongbook' . $box_count),
            '#value' => t('Подовжити'),
        );
      }

    }
  }

  return $form;
}

function bookbox_delete_bookfromcart1 ($form, &$form_state) {
  global $user;
  $order = commerce_cart_order_load($user->uid);
  $line_item = $order->commerce_line_items['und'][0]['line_item_id'];
  dsm($line_item);
  commerce_cart_order_product_line_item_delete($order, $line_item);
  commerce_cart_order_refresh($order);
}


function bookbox_delete_bookfromcart2 ($form, &$form_state) {
  global $user;
  $order = commerce_cart_order_load($user->uid);
  $line_item = $order->commerce_line_items['und'][1]['line_item_id'];
  commerce_cart_order_product_line_item_delete($order, $line_item);
  commerce_cart_order_refresh($order);
}

function bookbox_confirm_box($form, &$form_state) {
  drupal_set_message('confirm');
  global $user;

  $order = commerce_cart_order_load($user->uid);
  dsm($order, 'order');

  //todo в принципе юзер может подтвердать и один товар если второй в продленке на этот мес
  if(count($order->commerce_line_items['und']) > 1) {
    // 1. запомним второй товар
    $line_item_id2 = $order->commerce_line_items['und'][1]['line_item_id'];
    $line_item2 = commerce_line_item_load($line_item_id2); // второй товар
    $product_id2 = $line_item2->commerce_product['und']['0']['product_id'];
    dsm($line_item2);

    //2. удалим второй товар
    commerce_cart_order_product_line_item_delete($order, $line_item_id2);

    //3. проапдейтим статус первого товара
    commerce_order_status_update($order, 'completed', $skip_save = FALSE, $revision = NULL, $log = '');

    //4. добавим второй товар в корзину
    $order = commerce_order_new($user->uid, 'checkout_checkout');
    commerce_order_save($order);
    $product = commerce_product_load($product_id2);
    $line_item = commerce_product_line_item_new($product, 1, $order->order_id);
    commerce_line_item_save($line_item);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_wrapper->commerce_line_items[] = $line_item;
    commerce_order_save($order);

    //5. проапдейтим статус второго товара
    commerce_order_status_update($order, 'completed', $skip_save = FALSE, $revision = NULL, $log = '');
  }
}

function bookbox_form_alter(&$form, &$form_state, $form_id){
  if ($form['#id'] == 'user-register-form') {
    $form['#validate'][] = 'bookbox_registeruser_validate';
  }
}

function bookbox_registeruser_validate($form, &$form_state) {
  $company_id = $form_state['values']['field_company']['und'][0]['target_id'];
  $usermail = $form_state['values']['mail'];

  if ($usermail && $company_id) {
    $usermail_domain = substr(strrchr($usermail, "@"), 1);
    $node = node_load($company_id);
    $domains = $node->field_maildomain['und'];
    $in_list = false;

    for($i = 0; $i < count($domains); $i++) {
      if ($domains[$i]['value'] == $usermail_domain) {
        $in_list = true;
      }
    }

    if (!$in_list) {
      form_set_error('mail', 'Ваш email не співпадає з обранною компанією');
    }
  }
}