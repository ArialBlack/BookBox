<?php
module_load_include('inc', 'bookbox', 'bookbox.functions');
module_load_include('inc', 'bookbox', 'bookbox.mail');          //emails
module_load_include('inc', 'bookbox', 'bookbox.forms');
//module_load_include('inc', 'bookbox', 'bookbox.cart');          //Корзина
module_load_include('inc', 'bookbox', 'bookbox.order');         //Заказ месяца
module_load_include('inc', 'bookbox', 'bookbox.readnow');       //Читаю сейчас
module_load_include('inc', 'bookbox', 'bookbox.adminmessages');
module_load_include('inc', 'bookbox', 'bookbox.blocks');

function bookbox_menu(){
  $items=array();

  $items['admin/bookbox/delivered'] = array(
      'title' => 'Сповістити систему про доставку',
      'description' => 'Admin labels',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bookbox_admin_delivery_form'),
      'access arguments' => array('access adminstration page'),
      'access callback' => TRUE,
  );

  $items['admin/bookbox/labels'] = array(
      'title' => 'Адмін-тексти',
      'description' => 'Admin labels',
      'type' => MENU_NORMAL_ITEM,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('bookbox_admin_labels_form'),
      'access arguments' => array('access adminstration page'),
      'access callback' => TRUE,
  );

  $items['user/orders'] = array(
      'title' => 'Історія замовлень',
      'page callback' => 'bookbox_user_orders_history',
      //'page arguments' => array(1),
      'access callback' => TRUE,
      'type' => MENU_LOCAL_TASK,
  );

  $items['confirm/%/%/book'] = array(
      'title' => 'Buy',
      'page callback' => 'bookbox_confirm_book',
      'page arguments' => array(1,2),
      'access arguments' => array('access content'), // whatever see above
      'type' => MENU_CALLBACK
  );

  $items['json/category'] = array(
      'page callback' => 'bookbox_category_endpoint',
      'access arguments' => array('access content'),
  );

  global $user;
  $uid = $user->uid;

  $show_cart = true;
  //todo
  if(bookbox_count_in_confirm($uid) > 0 ) {
    $show_cart = false;
  }

  $show_order = true;
  if( bookbox_count_in_confirm($uid) < 1 ) {
    $show_order = false;
  }

  $show_reading_now = true;
  if( count(bookbox_get_in_reading_now($uid)) < 1) {
    $show_reading_now = false;
  }

  if ($show_reading_now &&  count(bookbox_get_in_reading_now($uid)) >= variable_get('varMaxBooks')) {
    $show_order = false;
  }

  if ($show_cart) {
    $items['user/usercart'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bookbox_mini_cart_block'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'user-menu',
    );
  }

  if ($show_order) {
    $items['user/userorder'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bookbox_month_order_block'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'user-menu',
    );
  }

  if($show_reading_now) {
    $items['user/userreadingnow'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('bookbox_reading_now_block'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
        'menu_name' => 'user-menu',
    );
  }

  return $items;
}

function bookbox_menu_site_status_alter(&$menu_site_status, $path) {
  if (user_is_anonymous()) {
    if ($path == 'user') {
      drupal_goto('user/login');
    }
  }
}

//insert user to mailchimp company list after register
function bookbox_user_insert(&$edit, $account, $category) {
  $nid = (int)$account->field_company['und'][0]['target_id'];
  $node = node_load($nid);
  $company_name = $node->title;

  $user_mail = $account->mail;
  $user_name = $account->field_name['und'][0]['value'];
  $user_last_name = $account->field_sirname['und'][0]['value'];

  $mailchimp_user_data = array(
      'EMAIL' => $user_mail,
      'FNAME' => $user_name, // fields in mailchimp list
      'LNAME' => $user_last_name,
  );

  $mail_chimp_lists = mailchimp_get_lists();

  foreach ($mail_chimp_lists as $mail_chimp_list) {
    if ($mail_chimp_list->name == $company_name) {
      $list_id = $mail_chimp_list->id;

      if (mailchimp_subscribe(
          $list_id,
          $user_mail,
          $mailchimp_user_data,
          false,
          false
      )) {
        drupal_set_message(t('Thank you. From now you will receive our promo materials'));
      } else {
        drupal_set_message('Error occurred while adding your email to subscribe list', 'error');
      }
    }
  }
}

//delete user from mailchimp company list after delete in drupal
function bookbox_user_delete($account)
{
  $nid = (int)$account->field_company['und'][0]['target_id'];
  $node = node_load($nid);
  $company_name = $node->title;

  $user_mail = $account->mail;

  $mail_chimp_lists = mailchimp_get_lists();

  foreach ($mail_chimp_lists as $mail_chimp_list) {
    if ($mail_chimp_list->name == $company_name) {
      $list_id = $mail_chimp_list->id;

      if(true === mailchimp_is_subscribed($list_id, $user_mail)){
        mailchimp_unsubscribe_member(
            $list_id,
            $user_mail
        );
      }
    }
  }
}

function bookbox_user_update(&$edit, $account, $category){
  if(isset($edit['pass'])) {
    if(null != ($edit['pass']) && $account->original->pass != $edit['pass']){
      $mail_to = $account->mail;
      $params['merge_vars']['FNAME'] = $account->field_name['und'][0]['value'];
      bookbox_mail_send('bookbox', 'password_change', $mail_to, $params);
    }
  }
}

function bookbox_equal_stocks() {
  $result = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.type', 'book')
      ->condition('n.status', 1)
      ->execute()->fetchAll();

  foreach ($result as $row) {
    $nid = $row->nid;
    $node = node_load($nid);
    if(isset($node->field_bookfields)) {
      bookbox_node_update($node);
    }
  }
}

function bookbox_node_update($node) {
  if(isset($node->field_bookfields) && count($node->field_bookfields) > 0 ) {
    $product_id = $node->field_bookfields['und'][0]['product_id'];
    $product = commerce_product_load($product_id);
    $absolute_stock = $product->field_absolute_stock['und'][0]['value'];
    $in_orders = bookbox_get_in_orders($node);
    $product->commerce_stock['und'][0]['value'] = $absolute_stock - $in_orders;
    commerce_product_save($product);
  }
}

function bookbox_entity_update($entity, $type) {
  if(isset($entity->nid) && isset($entity->field_bookfields)  && count($entity->field_bookfields) > 0) {
    $product_id = $entity->field_bookfields['und'][0]['product_id'];
    $product = commerce_product_load($product_id);
    $absolute_stock = $product->field_absolute_stock['und'][0]['value'];
    $in_orders = bookbox_get_in_orders($entity);
    $product->commerce_stock['und'][0]['value'] = $absolute_stock - $in_orders;
    commerce_product_save($product);
  }

  if($type == 'commerce_order' && $entity->status == 'archive') {
    $line_item_id = $entity->commerce_line_items['und'][0]['line_item_id'];
    $line_item = commerce_line_item_load($line_item_id);
    $product_id = $line_item->commerce_product['und'][0]['product_id'];
    $product = commerce_product_load($product_id);
    $absolute_stock = $product->field_absolute_stock['und'][0]['value'];
    $in_orders = bookbox_get_in_orders($entity);
    $product->commerce_stock['und'][0]['value'] = $absolute_stock - $in_orders;
    commerce_product_save($product);
  }
}

function bookbox_commerce_order_presave($order) {
  if(isset($order->commerce_line_items) && count($order->commerce_line_items) > 0) {
    $line_item = commerce_line_item_load($order->commerce_line_items['und'][0]['line_item_id']);

    if(isset($line_item->commerce_product)) {
      $node = _bookbox_get_product_display_by_product_id($line_item->commerce_product['und'][0]['product_id']);
      bookbox_node_update($node);
    }
  }
}

function computed_field_field_search_string_compute(&$entity_field, $entity_type, $entity, $field, $instance, $langcode, $items) {
  $authors = " ";
  $author_count = count($entity->field_book_author['und']);

  for($i = 0; $i < $author_count; $i++) {
    $tid = $entity->field_book_author['und'][$i]['tid'];
    $term = taxonomy_term_load($tid);
    $authors = $authors . " " . $term->name;
  }

  $entity_field[0]['value'] = $entity->title . " " . $entity->field_origin_name['und'][0]['value'] . $authors;
}

function bookbox_category_endpoint() {
  $tree = taxonomy_get_nested_tree(4);
  $items = taxonomy_nested_tree_render($tree);
  drupal_json_output($items);
}

function bookbox_theme() {
  return array(
    'manualhits' => array(
      'template' => 'block--bookbox-manualhits',
      'variables' => array(),
    ),
    'newbyadmin' => array(
      'template' => 'block--bookbox-newbyadmin',
      'variables' => array(),
    ),
    'companyhits' => array(
      'template' => 'block--bookbox-companyhits',
      'variables' => array(),
    ),
    'relevantbooks' => array(
      'template' => 'block--bookbox-relevantbooks',
      'variables' => array(),
    ),
  );
}